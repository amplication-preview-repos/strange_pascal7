/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DocumentType } from "./DocumentType";
import { DocumentTypeCountArgs } from "./DocumentTypeCountArgs";
import { DocumentTypeFindManyArgs } from "./DocumentTypeFindManyArgs";
import { DocumentTypeFindUniqueArgs } from "./DocumentTypeFindUniqueArgs";
import { DeleteDocumentTypeArgs } from "./DeleteDocumentTypeArgs";
import { DocumentTypeService } from "../documentType.service";
@graphql.Resolver(() => DocumentType)
export class DocumentTypeResolverBase {
  constructor(protected readonly service: DocumentTypeService) {}

  async _documentTypesMeta(
    @graphql.Args() args: DocumentTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DocumentType])
  async documentTypes(
    @graphql.Args() args: DocumentTypeFindManyArgs
  ): Promise<DocumentType[]> {
    return this.service.documentTypes(args);
  }

  @graphql.Query(() => DocumentType, { nullable: true })
  async documentType(
    @graphql.Args() args: DocumentTypeFindUniqueArgs
  ): Promise<DocumentType | null> {
    const result = await this.service.documentType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DocumentType)
  async deleteDocumentType(
    @graphql.Args() args: DeleteDocumentTypeArgs
  ): Promise<DocumentType | null> {
    try {
      return await this.service.deleteDocumentType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
